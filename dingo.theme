<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Component\Utility\Xss;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function dingo_preprocess_html(&$variables) {
  // Add icon to title per environment.
  $getEnv = \Drupal::service('oit.environment.icon');
  $stack = \Drupal::request();
  $keys = $stack->get('keys');
  $env = getenv('AH_SITE_ENVIRONMENT');
  // Currently used for login button via js injector to fix behat.
  if ($env == 'local' || $env == 'LANDO') {
    $variables['attributes']['class'][] = 'env-local';
  }
  if (isset($keys)) {
    $searchKeys = Xss::filter($keys);
    $searchKeys = strtolower($searchKeys);
    $searchKeys = preg_replace("/(\W)+/", "", $searchKeys);
    $variables['attributes']['class'][] = $searchKeys;
  }
  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);
  if (isset($path_args[1]) && isset($path_args[2]) && ($path_args[1] == 'node') && (is_numeric($path_args[2]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[2];
  }
  $current_title = $variables['head_title']['title'];
  if (($variables['node_type'] ?? '') == 'webform' && isset($path_args[4])) {
    $tempstore = \Drupal::service('tempstore.private')->get('servicenow');
    $meow_status = $tempstore->get("meow-status");
    // Add webform status to the page title for screen readers.
    if ($path_args[4] == 'confirmation') {
      if ($meow_status) {
        $current_title =  t('Successfully submitted -')  . $current_title;
      }
      if ($meow_status === 0) {
        $current_title =  t('There was and error communicating with service now - ')  . $current_title;
      }
    }
  }
  // Add icons to local/dev/test environments.
  $variables['head_title']['title'] = $getEnv->getEnv() . $current_title;
}

/**
 * Implements hook_preprocess_page_title() for HTML document templates.
 */
function dingo_preprocess_page_title(&$variables) {
  $node = \Drupal::request()->attributes->get('node');
  if (!is_string($node) && isset($node)) {
    if ($node->bundle() == 'page') {
      $title_image_fid = $node->get('field_title_background')->target_id;
      if (isset($title_image_fid)) {
        $file = \Drupal\file\Entity\File::load($title_image_fid);
        $path = $file->getFileUri();
        $url = $file->createFileUrl();
        $variables['attributes'] = [
          'data-bg-image' => $url,
        ];
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function dingo_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form element templates.
 */
function dingo_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] == 'search') {
    $suggestions[] = 'form_element__search_block_form';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dingo_preprocess_page(&$variables) {
  $variables['#attached']['drupalSettings']['responsive_menu']['custom'] = [
    'options' => [
      'navbar' => [
        'add' => TRUE,
        'title' => 'Main Menu',
      ],
    ],
    'config' => [
      'classNames' => [
        'selected' => 'menu-item--active-trail',
      ],
    ],
  ];
}

function dingo_preprocess_breadcrumb(&$variables) {
  if(($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb']){
    $variables['#cache']['contexts'][] = 'url';
  }
}


